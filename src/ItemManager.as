///////////////////////////////////////////////////////////
//  Macromedia ActionScript Implementation of the Class ItemManager
//  Generated by Enterprise Architect
//  Original author: Kurniawan Fitriadi
///////////////////////////////////////////////////////////

package 
{
	import com.game.*;
	import de.polygonal.core.ObjectPoolFactory;
	import flash.display.DisplayObjectContainer;
	import flash.utils.getQualifiedClassName;
	
	public class ItemManager
	{
		static private var m_instance:ItemManager;
		
		/* active item list */
		private var m_head:CBasePickableItem;
		private var m_tail:CBasePickableItem;
		
		private var m_entityNames:Array;
		private var m_entityClasses:Array;
		private var m_entityCount:int;
		
		public function ItemManager(lock:SingletonLock)	
		{
			initialize();
		}
		
		protected function initialize():void
		{
			m_head = null;
			m_tail = null;
			
			m_entityNames = [];
			m_entityClasses = [];
		}
		
		public function registerEntity(entityClass:Object, initCount:int):void
		{
			var name:String = getQualifiedClassName(entityClass);
			
			m_entityNames.push(name);
			m_entityClasses[name] = entityClass;
			
			PoolManager.getInstance().registerClass( entityClass, initCount );
		}

	    /**
	     * 
	     * @param target
	     * @param missile_type
	     */
	    public function add( entityClass:Object, container:DisplayObjectContainer, 
								x:int, y:int, floorBound:int ): CBasePickableItem
	    {
			var entity:CBasePickableItem;
			
			m_entityCount++;
			
			var name:String = getQualifiedClassName(entityClass);
			entity = PoolManager.getInstance().borrowItem( m_entityClasses[name] );
			
			entity.onCreate( container, x, y, floorBound );
			
			// add to list
			if( m_head == null )
			{
				m_head = entity;
				m_tail = entity;
			}
			else
			{
				m_tail.next = entity;
				entity.prev = m_tail;
				m_tail = entity;
			}
			
			return entity;
	    }
		
		public function update(elapsedTime:int):void
		{
			var item:CBasePickableItem = m_head;
								
			while( item != null ) 
			{
				if( item.isActive() )
				{
					item.update(elapsedTime);
					item = item.next;
				}
				else	
				{
					var garbage:CBasePickableItem = item;
					item = item.next;
					remove(garbage);
				}
			}
		}
		
		public function clear():void
		{
			var item:CBasePickableItem = m_head;
			
			while( item != null ) 
			{
				if ( item.isActive() )
				{
					var garbage:CBasePickableItem = item;
					item = item.next;
					remove(garbage);
				}
				else
				{
					item = item.next;
				}
			}
		}
		
		public function remove(item:CBasePickableItem): void
		{
			m_entityCount--;
			item.onRemove();
			
			/* check if object is a list head */
			if( item.prev == null )
			{
				if( item.next != null )
				{
					m_head = item.next;
					item.next.prev = null;
					item.next = null;
				}
				else 
				{
					m_head = null;
					m_tail = null;
				}
			}
			
			/* check if object is a list body */
			else if( item.prev != null && item.next != null )
			{
				// this is a body
				item.prev.next = item.next;
				item.next.prev = item.prev;
				
				item.prev = null;
				item.next = null;
			}
			
			/* check if object is a list tail */
			else if( item.next == null )
			{
				if( item.prev != null )
				{
					// this is the tail
					m_tail = item.prev;
					item.prev.next = null;
					item.prev = null;
				}
			}
			sendToPool(item);
		}
		
		private function sendToPool(item:CBasePickableItem): void
		{
			/* send object to pool */
			var found:Boolean = false;
			var length:int = m_entityNames.length;
			var index:int = 0;
			
			while ( !found && index < length )
			{
				var name:String = m_entityNames[index];
				if( item is m_entityClasses[name] )
				{
					PoolManager.getInstance().recycleItem( m_entityClasses[name], item );
					found = true;
				}
				index++;
			}
			
			if( !found )
			{
				trace("[Item Manager] Cannot find pool for: ", getQualifiedClassName(item));
			}
		}
		
	    static public function getInstance(): ItemManager
	    {
			if( m_instance == null ){
            	m_instance = new ItemManager( new SingletonLock() );
            }
			return m_instance;
	    }

	}//end ItemManager
}

class SingletonLock{}