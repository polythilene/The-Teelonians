///////////////////////////////////////////////////////////
//  MissileManager.as
//  Macromedia ActionScript Implementation of the Class MissileManager
//  Generated by Enterprise Architect
//  Original author: Kurniawan Fitriadi
///////////////////////////////////////////////////////////

package 
{
	import com.game.*;
	import de.polygonal.core.ObjectPoolFactory;
	import flash.display.DisplayObjectContainer;
	import flash.utils.getQualifiedClassName;
	
	public class MissileManager
	{
		static private var m_instance:MissileManager;
		
		/* active missile list */
		private var m_head:CBaseMissile;
		private var m_tail:CBaseMissile;
		
		private var m_entityNames:Array;
		private var m_entityClasses:Array;
		private var m_entityCount:int;
		
		public function MissileManager(lock:SingletonLock)	
		{
			initialize();
		}
		
		protected function initialize():void
		{
			m_head = null;
			m_tail = null;
			
			m_entityNames = [];
			m_entityClasses = [];
		}
		
		public function registerEntity(entityClass:Object, initCount:int):void
		{
			var name:String = getQualifiedClassName(entityClass);
			
			m_entityNames.push(name);
			m_entityClasses[name] = entityClass;
			
			PoolManager.getInstance().registerClass( entityClass, initCount );
		}

	    /**
	     * 
	     * @param target
	     * @param missile_type
	     */
	    public function launch( entityClass:Object, container:DisplayObjectContainer, 
								x:int, y:int, direction:int, 
								faction:int, lane:int, 
								damage:int, counterOf:int, counterDamage:int,
								level:int, detectVisible:Boolean, owner:CBaseTeelos, exParams:Object=null): CBaseMissile
	    {
			var entity:CBaseMissile;
			
			m_entityCount++;
			
			var name:String = getQualifiedClassName(entityClass);
			entity = PoolManager.getInstance().borrowItem( m_entityClasses[name] );
			entity.onCreate( container, x, y, direction, faction, lane, damage, counterOf, counterDamage, level, detectVisible, owner, exParams );
			
			// add to list
			if( m_head == null )
			{
				m_head = entity;
				m_tail = entity;
			}
			else
			{
				m_tail.next = entity;
				entity.prev = m_tail;
				m_tail = entity;
			}
			
			return entity;
	    }
		
		public function update(elapsedTime:int):void
		{
			var missile:CBaseMissile = m_head;
								
			while( missile != null ) 
			{
				if( missile.isActive() )
				{
					missile.update(elapsedTime);
					missile = missile.next;
				}
				else	
				{
					var garbage:CBaseMissile = missile;
					missile = missile.next;
					
					remove(garbage);
				}
			}
		}
		
		public function clear():void
		{
			var missile:CBaseMissile = m_head;
			while( missile != null ) 
			{
				if( missile.isActive() )
				{
					var garbage:CBaseMissile = missile;
					missile = missile.next;
					
					remove(garbage);
				}
				else
				{
					missile = missile.next;
				}
			}
		}
		
		public function remove(missile:CBaseMissile): void
		{
			m_entityCount--;
			missile.onRemove();
			
			/* check if object is a list head */
			if( missile.prev == null )
			{
				if( missile.next != null )
				{
					m_head = missile.next;
					missile.next.prev = null;
					missile.next = null;
				}
				else 
				{
					m_head = null;
					m_tail = null;
				}
			}
			
			/* check if object is a list body */
			else if( missile.prev != null && missile.next != null )
			{
				// this is a body
				missile.prev.next = missile.next;
				missile.next.prev = missile.prev;
				
				missile.prev = null;
				missile.next = null;
			}
			
			/* check if object is a list tail */
			else if( missile.next == null )
			{
				if( missile.prev != null )
				{
					// this is the tail
					m_tail = missile.prev;
					missile.prev.next = null;
					missile.prev = null;
				}
			}
			sendToPool(missile);
		}
		
		private function sendToPool(missile:CBaseMissile): void
		{
			/* send object to pool */
			var found:Boolean = false;
			var length:int = m_entityNames.length;
			var index:int = 0;
			
			while ( !found && index < length )
			{
				var name:String = m_entityNames[index];
				if( missile is m_entityClasses[name] )
				{
					PoolManager.getInstance().recycleItem( m_entityClasses[name], missile );
					found = true;
				}
				index++;
			}
			
			if( !found )
			{
				trace("[Missile Manager] Cannot find pool for: ", getQualifiedClassName(missile));
			}
		}
		
	    static public function getInstance(): MissileManager
	    {
			if( m_instance == null ){
            	m_instance = new MissileManager( new SingletonLock() );
            }
			return m_instance;
	    }

	}//end MissileManager
}

class SingletonLock{}